'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _reactAddons = require('react/addons');

var _reactAddons2 = _interopRequireDefault(_reactAddons);

var _Tab = require('./Tab');

var _Tab2 = _interopRequireDefault(_Tab);

var _reactVendorPrefix = require('react-vendor-prefix');

var _reactVendorPrefix2 = _interopRequireDefault(_reactVendorPrefix);

var TabPane = _reactAddons2['default'].createClass({
    displayName: 'TabPane',

    propTypes: {
        orientation: _reactAddons2['default'].PropTypes.string.isRequired
    },

    getDefaultProps: function getDefaultProps() {
        return {
            orientation: 'vertical'
        };
    },

    getInitialState: function getInitialState() {
        var _this = this;

        var active = this.props.children[0];
        this.props.children.forEach(function (child) {
            child.props.parent = _this;
            if (child.props.active) {
                active = child;
            } else if (child.props.active) {
                active = child;
            }
        });
        return {
            activeTab: active
        };
    },

    selectTab: function selectTab(tab) {
        this.setState({
            activeTab: tab
        });
    },

    render: function render() {
        var _this2 = this;

        var classes = ['TabPane', this.props.orientation].join(' ');
        var containerStyles = undefined;
        if (this.props.orientation === 'vertical') {
            containerStyles = {
                display: 'flex',
                flex: 1,
                flexDirection: 'row',
                height: '100%',
                position: 'absolute',
                left: 0,
                right: 0
            };
        } else {
            containerStyles = {
                display: 'flex',
                flex: 1,
                position: 'relative',
                flexDirection: 'column',
                height: '100%',
                minHeight: '100%'
            };
        }

        var tabsStyles = undefined;
        var orientation = this.props.orientation;
        if (orientation === 'vertical') {
            tabsStyles = {
                height: '100%'
            };
        } else {
            tabsStyles = {
                flex: 1,
                width: '100%',
                whiteSpace: 'nowrap'
            };
        }

        var paneClasses = ['TabContent', this.props.className].join(' ');
        var paneStyles = {
            flex: 1
        };

        var activeId = this.state.activeTab.props.id;
        var elements = this.props.children.map(function (child) {
            var active = child.props.id === activeId;
            return _reactAddons2['default'].addons.cloneWithProps(child, {
                active: active,
                selectTab: _this2.selectTab,
                orientation: orientation,
                id: child.props.id,
                key: child.props.id
            });
        });

        var styles = _reactVendorPrefix2['default'].prefix({
            container: containerStyles,
            tab: tabsStyles,
            pane: paneStyles
        });

        return _reactAddons2['default'].createElement(
            'div',
            { className: classes, style: styles.container, ref: 'TabPane' },
            _reactAddons2['default'].createElement(
                'div',
                { className: 'Tabs', style: styles.tab },
                elements
            ),
            _reactAddons2['default'].createElement(
                'div',
                { className: paneClasses, style: styles.pane },
                this.state.activeTab.props.children
            )
        );
    }
});

exports['default'] = TabPane;
module.exports = exports['default'];